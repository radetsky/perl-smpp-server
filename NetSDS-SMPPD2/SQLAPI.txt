This documents describes how third party vendors can intergare with SMPPServer v.2 
-----------------------------------------------------------------------------------

1. Authentication and authorization table 
-----------------------------------------

CREATE TABLE `auth_table` (
  `esme_id` int(11) NOT NULL auto_increment,
  `system_id` varchar(45) default NULL,
  `password` varchar(45) default NULL,
  `bandwidth` int(11) default NULL,
  `allowed_ip` varchar(256) default NULL,
  `allowed_src` varchar(256) default NULL,
  `max_connections` int(11) default 1,
  `active` tinyint(1) default 0,
  PRIMARY KEY  (`esme_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT='Table  for authorization of ESME''s'


This table contains list of ESME and properties. 

Field           |  Description 
-------------------------------
esme_id         | Autogenerated internal ID for ESME. 
system_id       | System ID (login) for ESME 
password        | Clear text password 
bandwidth       | Count of SMS per second for ESME. Works well while receiving SM. 
allowed_ip      | List of comma separated IPv4 addresses to allow access; 
                | If NULL allow from 127.0.0.1
allowed_src     | List of comma separated Source Address i.e. alphanumeric field. 
                | If you need you can increase length of this field up to 64K.
                | If NULL allow any Source Address.  
max_connections | Count of simultaneous connections from ESME. Up to 1000. 
                | BE CAREFUL: Global maximum count of connections is 1024. 
active          | 1 - Allow access. 0 - Deny access anywhere. 


Example: adds system-id: Test1024 with password '1024secret' and parametes: 
10 SM/second, allow from two addresses: 10.0.0.231 and 193.193.194.243 
Allow send SM from src_addr like "alpha","beta","gamma","102410134".
With maximum 2 simultaneous connections. Active = 1 because we accept ESME to work.


insert into auth_table (system_id,password,bandwidth,allowed_ip,allowed_src,max_connections,active) 
  values ('Test1024','1024secret',10,'10.0.0.231,193.193.194.243','alpha,beta,gamma,102410134',2,1); 


To DISABLE ESME just update auth_table set active=0. 

Any changes of properties of ESME will apply immediately. 


2. Messages table
------------------------

When auth_table filled by list of ESMEs third party vendor can send SM to ESME and receive SM from ESME

Let's see structure of table:
 

 CREATE TABLE `messages` (
  `id` int(11) NOT NULL auto_increment,
  `msg_type` varchar(3) default NULL,
  `esme_id` int(11) default NULL,
  `received` timestamp NOT NULL default '0000-00-00 00:00:00',
  `processed` timestamp NOT NULL default CURRENT_TIMESTAMP,
  `src_addr` varchar(32) default NULL,
  `dst_addr` varchar(32) default NULL,
  `body` varchar(512) default NULL,
  `coding` int(11) default '0',
  `udh` varchar(512) default NULL,
  `mwi` int(11) default NULL,
  `mclass` int(11) default NULL,
  `message_id` varchar(64) default NULL,
  `validity` int(11) default '1440',
  `deferred` int(11) default '0',
  `registered_delivery` int(11) default '0',
  `service_type` varchar(64) default NULL,
  `extra` varchar(512) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 | 


Field               |  Description 
-------------------------------
id                  | Autogenerated internal ID of message. 
msg_type            | MO,MT,DLR. MO - Mobile Originated, MT - Mobile Terminated, DLR - Delivery Report. 
esme_id             | ESME ID in auth_table (may be foreign key) 
received            | Timestamp
processed           | Timestamp 
src_addr            | SM Source 
dst_addr            | SM Destination 
body                | Hexadecimal byte string 
coding              | coding (integer) – coding (0 – 7bit, 1 – binary, 2 – UCS-2BE)
udh                 | UDH as hexadecimal byte string
mwi                 | message waiting indication (the same as in Kannel), NULL means empty
mclass              | message_class (the same as in Kannel), NULL means empty
message_id          | externally used message ID
validity            | validity_period in minutes
deferred            | deferred delivery timeout in minutes
registered_delivery | 1 if DLR expected, 0 - otherwise
service_type        | service_type as defined in SMPP specification.
extra               | optional parameters as JSON encoded string (e.g. SMPP optional TLV)

 
3. Send SM to ESME
------------------

Quick way: 
insert into messages ( msg_type, esme_id, src_addr, dst_addr, body, coding, udh, mwi, mclass, message_id, validity, deferred, registered_delivery, service_type, extra, received ) values ('MO', 1, '0504139380', 'smppsvrtst.pl', '5465737420', 2, NULL, NULL, NULL, '101010101001', 1440, NULL, NULL, NULL, NULL, '2010-08-30 23:59:00' );

Value          | Description: 
---------------+--------------------------------------------------------------
MO             | Mobile originated SM 
1              | Look for auth_table record with id=1 
0504139380     | Received from 
smppsvrtst.pl  | Destination of SM. May be alphanumeric. 
5465737420     | hexadecimal string of body (See 5. Functions  ) 
2              | Coding UCS_2BE 
101010101001   | External message ID. May be passed from vendor to ESME and back. 
1440           | Validity Period is 1440 minutes (24 hours 00 minutes)
2010-08-30 23:59:00 | Received from SMSC. 

Every second SMPPServers looks into database and tries to get messages for every connected ESME.
If found something try to send it to corresponding ESME. After complete sending, sent message will removed 
from table 'messages'. 

Vendor can insert into 'messages' MO and DLR types. 


4. Receive from ESME 
--------------------

Quick way: 

select id,msg_type,esme_id,received,src_addr,dst_addr,body,coding,udh,mwi,mclass,message_id,validity,deferred,registered_delivery,service_type,extra from messages where msg_type = 'MT' order by id. 

Fields described in p.2  

After complete processing of message we recommend to remove it from table 'messages'.


 
5. Functions. 
-------------

All functions is in pack with this server and documentation. 
Functions conv_* is in NetSDS/Util/Convert.pm 


Hexadecimal byte string you can get from usual string by this function: 

sub conv_str_hex {
    my ($str) = @_;

    return defined($str) ? uc( unpack( "H*", "$str" ) ) : "";
}


Convert from hexadecimal to string by this function. 

sub conv_hex_str {
    my ($hex) = @_;

    return defined($hex) ? pack( "H*", "$hex" ) : "";    #"$hex";
}


